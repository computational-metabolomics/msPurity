% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createDatabase.R
\name{createDatabase}
\alias{createDatabase}
\title{Create database}
\usage{
createDatabase(
  pa,
  xcmsObj,
  xsa = NULL,
  outDir = ".",
  grpPeaklist = NA,
  dbName = NA,
  metadata = NA,
  xset = NA
)
}
\arguments{
\item{pa}{purityA object; Needs to be the same used for frag4feature function}

\item{xcmsObj}{xcms object of class XCMSnExp or xcmsSet; Needs to be the same used for frag4feature function (this will be ignored when using xsa parameter)}

\item{xsa}{CAMERA object (optional); if CAMERA object is used, we ignore the xset parameter input and obtain all information
from the xset object nested with the CAMERA xsa object. Adduct and isotope information
will be included into the database when using this parameter. The underlying xset object must
be the one used for the frag4feature function}

\item{outDir}{character; Out directory for the SQLite result database}

\item{grpPeaklist}{dataframe (optional); Can use any peak dataframe. Still needs to be derived from the xset object though}

\item{dbName}{character (optional); Name of the result database}

\item{metadata}{list; A list of metadata to add to the s_peak_meta table}

\item{xset}{xcms object of class XCMSnExp or xcmsSet; (Deprecated - if provided, will replace variable 'obj')}
}
\value{
path to SQLite database and database name
}
\description{
** General **

Create an SQLite database of an LC-MS(/MS) experiment (replaces the create_database function).

Schema details can be found \href{https://bioconductor.org/packages/release/bioc/vignettes/msPurity/inst/doc/msPurity-spectral-datatabase-schema.html}{here}.

\strong{Example LC-MS/MS processing workflow}
\itemize{
\item Purity assessments
\itemize{
\item (mzML files) -> purityA -> (pa)
}
\item XCMS processing
\itemize{
\item (mzML files) -> xcms.xcmsSet -> xcms.merge -> xcms.group -> xcms.retcor -> xcms.group -> (xset)
}
\item Fragmentation processing
\itemize{
\item (xset, pa) -> frag4feature -> filterFragSpectra -> averageAllFragSpectra -> \strong{createDatabase} -> spectralMatching -> (sqlite spectral database)
}
}
}
\examples{
library(msPurity)
library(xcms)
library(magrittr)
#read in files and data
msmsPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = 'LCMSMS')
ms_data = readMSData(msmsPths, mode = 'onDisk', msLevel. = 1)

#subset the data to focus on retention times 30-90 seconds and m/z values between 100 and 200 m/z.
rtr = c(30, 90)
mzr = c(100, 200)
ms_data = ms_data \%>\%  filterRt(rt = rtr) \%>\%  filterMz(mz = mzr)

##### perform feature detection in individual files
cwp <- CentWaveParam(snthresh = 3, noise = 100, ppm = 10, peakwidth = c(3, 30))
xcmsObj <- xcms::findChromPeaks(ms_data, param = cwp)
xcmsObj@phenoData@data$class = c('sample', 'sample')
xcmsObj@phenoData@varMetadata = data.frame('labelDescription' = 'sampleNames', 'class')
pdp <- PeakDensityParam(sampleGroups = xcmsObj@phenoData@data$class, minFraction = 0, bw = 5, binSize = 0.017)
xcmsObj <- groupChromPeaks(xcmsObj, param = pdp)

###### use msPurity to link MS^2 scans to MS1 grouped features and export database ######
pa  <- purityA(msmsPths)
pa <- frag4feature(pa = pa, xcmsObj = xcmsObj)
pa <- filterFragSpectra(pa, allfrag=TRUE)
pa <- averageAllFragSpectra(pa)
dbPth <- createDatabase(pa, obj, metadata=list('polarity'='positive','instrument'='Q-Exactive'))


#######
# Run from previously generated data (where class(xcmsObj) == 'XCMSnExp'):
pa <- readRDS(system.file("extdata", "tests", "purityA",
          "9_averageAllFragSpectra_with_filter_pa.rds", package="msPurity"))
xcmsObj <- readRDS(system.file("extdata","tests", "xcms",
                "msms_only_xcmsnexp.rds", package="msPurity"))
msmsPths <- list.files(system.file("extdata", "lcms", "mzML",
               package="msPurityData"), full.names = TRUE, pattern = "MSMS")
pa@fileList[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
pa@fileList[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
obj@processingData@files[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
obj@processingData@files[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
td <- tempdir()
db_pth = createDatabase(pa = pa, xcmsObj = xcmsObj, outDir = td)

}
